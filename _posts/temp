---

# 6. 애그리게이트 패턴

애그리게이트는 도메인 기반 디자인 패턴입니다.  
DDD Aggregate 는 단일 단위로 처리될 수 있는 도메인 객체의 클러스터로 볼 수 있습니다.  
예를 들어, 주문과 상품이 있을 수 있으며 이들은 별도의 객체가 되지만  
상품과 함께 주문을 단일 애그리거트로 처리하는 것이 유용합니다.

애그리게이트를 구성하는 객체 중 하나는 애그리게이트 루트가 됩니다.  
애그리게이트 외부의 모든 참조는 애그리거트 루트를 통해서만 접근이 가능합니다.
따라서 애그리게이트 루트는 도메인 객체 클러스터내의 집합체의 무결성을 보장할 수 있습니다.

애그리게이트는 데이터 저장소 트랜잭션의 기본 요소이기도 합니다.
전체 애그리게이트를 로드하거나 저장하도록 요청합니다.
트랜잭션은 애그리게이트 경계를 넘어서는 안 됩니다.

DDD 집계는 때때로 컬렉션 클래스(목록, 맵 등)와 혼동됩니다. DDD 집계는 도메인 개념(주문, 진료소 방문, 재생 목록)인 반면 컬렉션은 일반적입니다. 집계에는 간단한 필드와 함께 여러 컬렉션이 포함되는 경우가 많습니다. "집계"라는 용어는 일반적인 용어이며 다양한 컨텍스트(예: UML)에서 사용됩니다. 이 경우 DDD 집계와 동일한 개념을 나타내지 않습니다

https://martinfowler.com/bliki/DDD_Aggregate.html
객체 협업 디자인

https://www.popit.kr/%EC%97%90%EA%B7%B8%EB%A6%AC%EA%B2%8C%EC%9E%87-%ED%95%98%EB%82%98%EC%97%90-%EB%A6%AC%ED%8C%8C%EC%A7%80%ED%86%A0%EB%A6%AC-%ED%95%98%EB%82%98/
https://alistair.cockburn.us/hexagonal-architecture/

https://stackoverflow.com/questions/14372065/rich-domain-model-and-orm
일정이나 피치못할 사유로 인해 우리는 '풍부한 도메인' 모델 대신  
'일단 동작하는 코드'를 지향하면서 '빈약한 도메인'을 도입할 가능성이 높습니다.
또한 조직 단위의 도메인 모델 기법을

도메인 레이어를 캡슐화하면서 자연스럽게 얻게 되는 것이 서비스/애플리케이션 레이어다. 그래서 기술이 도메인 레이어로 침투하지 않게 만들어야 하고, 반대로 도메인 로직이 서비스 레이어로 흘러 나오지 않게 막아주기도 해야하는데.

최근 코딩 과제를 제출하신 분들의 코드를 보면 도메인 레이어에 일부 비즈니스 로직을 넣기는 했으나, 또 상당 부분이 서비스 레이어에 빠져나와 있는 걸 보게 된다.

항상 TS와 DM을 선명하게 구분할 필요는 없다고 생각하고, 가능한 자신이 가진 속성을 직접 다루는 행위를 엔티티에 넣어두고, 그래서 view로 던지기 위한 getter와 대부분의 setter가 사라진 엔티티를 TS 스타일의 코드에서 사용하는 것만으로도 꽤 도움이 된다고 생각하는데. 이건 데이터 매핑 기술을 뭘 쓰든 하려면 할 수 있다.

사실 TS로도 깔끔하고 재사용성 높은 코드를 잘 만들던 사람이 DM으로도 개발을 잘 하더라. 코드 센스가 문제다.

DDD에서 서비스는 세 가지가 있다고 설명한다.
앱 서비스, 도메인 서비스, 인프라 서비스. 그래서 그냥 서비스라고 하면 헷갈린다.
스프링 서비스 애노테이션은 이 중 앱 서비스이고이다. 아키텍처 패턴의 서비스 레이어 패턴의 서비스, 코어 J2EE 패턴의 비즈니스 퍼사드이기도 하지.
도메인 서비스는 모델 안에 정의된 인터페이스이다. 구현은 상태가 없으니 적당한 싱글톤(패턴,빈,코틀린 오브젝트)으로.

https://happy-coding-day.tistory.com/entry/%EB%A6%AC%EB%B7%B0-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B4-2%EB%B6%80
